/*     Digital Pink Card - All rights reserved
*     Copyright (C) 2018
*     Written by:  
*     Cai, Jann Willem
*     Daroya, Carlos Adrian 
*     Ocampo, Pauline                   
*
*     This program is free software: you can redistribute it and/or modify
*     it under the terms of the GNU General Public License as published by
*     the Free Software Foundation, either version 3 of the License, or
*     (at your option) any later version.
*
*     This program is distributed in the hope that it will be useful,
*     but WITHOUT ANY WARRANTY; without even the implied warranty of
*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*     GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program.  If not, see <https://www.gnu.org/licenses/>.
*     This is a course requirement for CS 192
*     Software Engineering II under the
*     supervision of Asst. Prof. Ma. Rowena C.
*     Solamo of the Department of Computer
*     Science, College of Engineering, University
*     of the Philippines, Diliman for the AY 2017-2018


*     Code history:
*     01/02/2018: 	Generated through webpack module	Daroya, Carlos Adrian A.
*
*
*
*
*     Date created: 1 February 2018
*     Development Group: Cai, Daroya, Ocampo
*    

*     File purpose:
*     This file was auto-generated by the webpack 
*     module for the purpose of reducing production
*     size of the software.
*/


'use strict'
const path = require('path')
const ExtractTextPlugin = require('extract-text-webpack-plugin')
const config = require('./config')

const _ = module.exports = {}

_.cwd = (file) => {
     return path.join(process.cwd(), file || '')
}

_.cssLoader = config.cssModules ?
     'css-loader?-autoprefixer&modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]' :
     'css-loader?-autoprefixer'

_.cssProcessors = [
     {loader: '', test: /\.css$/},
     {loader: 'sass-loader?sourceMap', test: /\.scss$/},
     {loader: 'less-loader?sourceMap', test: /\.less$/},
     {loader: 'stylus-loader?sourceMap', test: /\.styl$/},
     {loader: 'sass-loader?indentedSyntax&sourceMap', test: /\.sass$/},
]

_.outputPath = config.electron ?
     path.join(__dirname, '../app/dist') :
     path.join(__dirname, '../dist')

_.outputIndexPath = config.electron ?
     path.join(__dirname, '../app/dist/index.html') :
     path.join(__dirname, '../dist/index.html')

_.target = config.electron ?
     'electron-renderer' :
     'web'

// https://github.com/egoist/vbuild/blob/master/lib/vue-loaders.js
_.loadersOptions = () => {
     const isProd = process.env.NODE_ENV === 'production'

     function generateLoader(langs) {
          langs.unshift('css-loader?sourceMap&-autoprefixer')
          if (!isProd) {
               return ['vue-style-loader'].concat(langs).join('!')
          }
          return ExtractTextPlugin.extract({
               fallback: 'vue-style-loader',
               use: langs.join('!')
          })
     }

     return {
          minimize: isProd,
          options: {
               // css-loader relies on context
               context: process.cwd(),
               vue: {
                    loaders: {
                         css: generateLoader([]),
                         sass: generateLoader(['sass-loader?indentedSyntax&sourceMap']),
                         scss: generateLoader(['sass-loader?sourceMap']),
                         less: generateLoader(['less-loader?sourceMap']),
                         stylus: generateLoader(['stylus-loader?sourceMap']),
                         js: 'babel-loader'
                    }
               }
          }
     }
}
