/*     Digital Pink Card - All rights reserved
*     Copyright (C) 2018
*     Written by:  
*     Cai, Jann Willem
*     Daroya, Carlos Adrian 
*     Ocampo, Pauline                   
*
*     This program is free software: you can redistribute it and/or modify
*     it under the terms of the GNU General Public License as published by
*     the Free Software Foundation, either version 3 of the License, or
*     (at your option) any later version.
*
*     This program is distributed in the hope that it will be useful,
*     but WITHOUT ANY WARRANTY; without even the implied warranty of
*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*     GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program.  If not, see <https://www.gnu.org/licenses/>.
*     This is a course requirement for CS 192
*     Software Engineering II under the
*     supervision of Asst. Prof. Ma. Rowena C.
*     Solamo of the Department of Computer
*     Science, College of Engineering, University
*     of the Philippines, Diliman for the AY 2017-2018


*     Code history:
*     01/02/2018: 	Generated through webpack module	Daroya, Carlos Adrian A.
*
*
*
*
*     Date created: 1 February 2018
*     Development Group: Cai, Daroya, Ocampo
*    

*     File purpose:
*     This file was auto-generated by the webpack 
*     module for the purpose of reducing production
*     size of the software.
*/


'use strict'
process.env.NODE_ENV = 'production'

const webpack = require('webpack')
const ExtractTextPlugin = require('extract-text-webpack-plugin')
const ProgressPlugin = require('webpack/lib/ProgressPlugin')
const OfflinePlugin = require('offline-plugin')
const rm = require('rimraf')
const base = require('./webpack.base')
const pkg = require('../package')
const _ = require('./utils')
const config = require('./config')

if (config.electron) {
     // remove files in dist folder in electron mode
     rm.sync('app/assets/*')
} else {
     // remove dist folder in web app mode
     rm.sync('dist/*')
     // use source-map in web app mode
     base.devtool = 'source-map'
}

// use hash filename to support long-term caching
base.output.filename = '[name].[chunkhash:8].js'
// add webpack plugins
base.plugins.push(
     new ProgressPlugin(),
     new ExtractTextPlugin('styles.[contenthash:8].css'),
     new webpack.DefinePlugin({
          'process.env.NODE_ENV': JSON.stringify('production')
     }),
     new webpack.optimize.UglifyJsPlugin({
          sourceMap: true,
          compress: {
               warnings: false
          },
          output: {
               comments: false
          }
     }),
     // extract vendor chunks
     new webpack.optimize.CommonsChunkPlugin({
          name: 'vendor',
          minChunks: module => {
               return module.resource && /\.(js|css|es6)$/.test(module.resource) && module.resource.indexOf('node_modules') !== -1
          }
     }),
     new webpack.optimize.CommonsChunkPlugin({
          name: 'manifest'
     }),
     // progressive web app
     // it uses the publicPath in webpack config
     new OfflinePlugin({
          relativePaths: false,
          ServiceWorker: {
               events:true,
               navigateFallbackURL:'/'
          },
          AppCache: {
               events:true,
               FALLBACK:{ '/':'/' }
          }
     })
)

// extract css in standalone css files
_.cssProcessors.forEach(processor => {
     let loaders
     if (processor.loader === '') {
          loaders = ['postcss-loader']
     } else {
          loaders = ['postcss-loader', processor.loader]
     }
     base.module.loaders.push({
          test: processor.test,
          loader: ExtractTextPlugin.extract({
               use: [_.cssLoader].concat(loaders),
               fallback: 'style-loader'
          })
     })
})

// minimize webpack output
base.stats = {
     // Add children information
     children: false,
     // Add chunk information (setting this to `false` allows for a less verbose output)
     chunks: false,
     // Add built modules information to chunk information
     chunkModules: false,
     chunkOrigins: false,
     modules: false
}

module.exports = base
